<?php

/**
 * Models_Solaria_Base_Company
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $CompanyID
 * @property string $Name
 * @property string $DirectPhone
 * @property string $TollFreePhone
 * @property string $Fax
 * @property string $TaxID
 * @property blob $LogoImage
 * @property boolean $UseImage
 * @property boolean $UseInfoOnInvoice
 * @property string $EmailAddress
 * @property string $WebAddress
 * @property timestamp $EffectiveDate
 * @property timestamp $ExpireDate
 * @property string $EmailCCAddress
 * @property integer $PayTemplateID
 * @property string $DefaultPayAccount
 * @property string $DefaultRcvAccount
 * @property integer $PrintStaffInvType
 * @property integer $DefaultTaxRateID
 * @property string $EmailBCCAddress
 * @property string $ReposDSN
 * @property string $ReposPath
 * @property integer $ReposAccountID
 * @property string $CompanyUID
 * @property string $Code
 * @property integer $LastStaffInvoiceIDNoOrders
 * @property integer $LastJobIDOldCommissions
 * @property integer $LastJobIDNoCSDFields
 * @property integer $IsSeparateCollections
 * @property timestamp $LastClosingDate
 * @property timestamp $CurrentClosingDate
 * @property integer $InterCompanyClientID
 * @property string $SchedulingEmailAddress
 * @property string $ProductionEmailAddress
 * @property string $BillingEmailAddress
 * @property Models_Solaria_PayTemplate $PayTemplate
 * @property Doctrine_Collection $Cases
 * @property Doctrine_Collection $Client
 * @property Doctrine_Collection $Collection
 * @property Doctrine_Collection $CompanyAccount
 * @property Doctrine_Collection $CompanyAddress
 * @property Doctrine_Collection $CompanyCase
 * @property Doctrine_Collection $CompanyJobPayTemplate
 * @property Doctrine_Collection $CompanyProduct
 * @property Doctrine_Collection $ConferenceRoom
 * @property Doctrine_Collection $Department
 * @property Doctrine_Collection $ExpenseRate
 * @property Doctrine_Collection $Invoice
 * @property Doctrine_Collection $InvoiceChargeRate
 * @property Doctrine_Collection $Job
 * @property Doctrine_Collection $JobTypeProductPrice
 * @property Doctrine_Collection $LastCaseRefNumber
 * @property Doctrine_Collection $Orders
 * @property Doctrine_Collection $OtherPayRate
 * @property Doctrine_Collection $Person
 * @property Doctrine_Collection $PriceTemplate
 * @property Doctrine_Collection $ProductTask
 * @property Doctrine_Collection $ReportText
 * @property Doctrine_Collection $StaffInvoice
 * @property Doctrine_Collection $SystemLanguage
 * @property Doctrine_Collection $Task
 * @property Doctrine_Collection $TaxRate
 * @property Doctrine_Collection $Transactions
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Models_Solaria_Base_Company extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('Company');
        $this->hasColumn('CompanyID', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('Name', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('DirectPhone', 'string', 25, array(
             'type' => 'string',
             'length' => '25',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('TollFreePhone', 'string', 25, array(
             'type' => 'string',
             'length' => '25',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('Fax', 'string', 25, array(
             'type' => 'string',
             'length' => '25',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('TaxID', 'string', 25, array(
             'type' => 'string',
             'length' => '25',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('LogoImage', 'blob', null, array(
             'type' => 'blob',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('UseImage', 'boolean', 1, array(
             'type' => 'boolean',
             'length' => '1',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('UseInfoOnInvoice', 'boolean', 1, array(
             'type' => 'boolean',
             'length' => '1',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('EmailAddress', 'string', 75, array(
             'type' => 'string',
             'length' => '75',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('WebAddress', 'string', 75, array(
             'type' => 'string',
             'length' => '75',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('EffectiveDate', 'timestamp', 16, array(
             'type' => 'timestamp',
             'length' => '16',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('ExpireDate', 'timestamp', 16, array(
             'type' => 'timestamp',
             'length' => '16',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('EmailCCAddress', 'string', 60, array(
             'type' => 'string',
             'length' => '60',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('PayTemplateID', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('DefaultPayAccount', 'string', 30, array(
             'type' => 'string',
             'length' => '30',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('DefaultRcvAccount', 'string', 30, array(
             'type' => 'string',
             'length' => '30',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('PrintStaffInvType', 'integer', 2, array(
             'type' => 'integer',
             'length' => '2',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('DefaultTaxRateID', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('EmailBCCAddress', 'string', 60, array(
             'type' => 'string',
             'length' => '60',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('ReposDSN', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('ReposPath', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('ReposAccountID', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('CompanyUID', 'string', 20, array(
             'type' => 'string',
             'length' => '20',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('Code', 'string', 2, array(
             'type' => 'string',
             'length' => '2',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('LastStaffInvoiceIDNoOrders', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('LastJobIDOldCommissions', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('LastJobIDNoCSDFields', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('IsSeparateCollections', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('LastClosingDate', 'timestamp', 16, array(
             'type' => 'timestamp',
             'length' => '16',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('CurrentClosingDate', 'timestamp', 16, array(
             'type' => 'timestamp',
             'length' => '16',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('InterCompanyClientID', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('SchedulingEmailAddress', 'string', 200, array(
             'type' => 'string',
             'length' => '200',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('ProductionEmailAddress', 'string', 200, array(
             'type' => 'string',
             'length' => '200',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('BillingEmailAddress', 'string', 200, array(
             'type' => 'string',
             'length' => '200',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Models_Solaria_PayTemplate as PayTemplate', array(
             'local' => 'PayTemplateID',
             'foreign' => 'PayTemplateID'));

        $this->hasMany('Models_Solaria_Cases as Cases', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_Client as Client', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_Collection as Collection', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_CompanyAccount as CompanyAccount', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_CompanyAddress as CompanyAddress', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_CompanyCase as CompanyCase', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_CompanyJobPayTemplate as CompanyJobPayTemplate', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_CompanyProduct as CompanyProduct', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_ConferenceRoom as ConferenceRoom', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_Department as Department', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_ExpenseRate as ExpenseRate', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_Invoice as Invoice', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_InvoiceChargeRate as InvoiceChargeRate', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_Job as Job', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_JobTypeProductPrice as JobTypeProductPrice', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_LastCaseRefNumber as LastCaseRefNumber', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_Orders as Orders', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_OtherPayRate as OtherPayRate', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_Person as Person', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_PriceTemplate as PriceTemplate', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_ProductTask as ProductTask', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_ReportText as ReportText', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_StaffInvoice as StaffInvoice', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_SystemLanguage as SystemLanguage', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_Task as Task', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_TaxRate as TaxRate', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));

        $this->hasMany('Models_Solaria_Transactions as Transactions', array(
             'local' => 'CompanyID',
             'foreign' => 'CompanyID'));
    }
}
