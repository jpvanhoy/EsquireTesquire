<?php

/**
 * Models_Main_Personnel
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Models_Main_Personnel extends Models_Main_Base_Personnel
{
	/**
	 * Override Doctrine_Record save method to provide some 
	 * additional logging and set-up.
	 *
	 * @param Doctrine_Connection $conn [optional]
	 */
    public function save(Doctrine_Connection $conn = null)
	{
		$modifiedFields = $this->getModified();
		if (in_array('passwordEnc', array_keys($modifiedFields))) {
			$passwordHistory = new Models_Intranet_PasswordHistory();
			$passwordHistory->personnel_id = $this->ID_number;
			$passwordHistory->date_created = date('Y-m-d H:i:s');
			$passwordHistory->password_hash = $this->passwordEnc;
			$passwordHistory->salt = $this->passwordSalt;
			$passwordHistory->save();
		}
		parent::save($conn);
	}

	/**
	 * Confirm that a given password meets security requirements
	 *
	 * @param string $password
	 * @return array 
	 */
	public function validatePassword($password, Zend_Config_Ini $config)
	{
		$messages = array();
		
		/**
		 * Has this password been used before?
		 */
		$manager = Doctrine_Manager::getInstance();
		$query = Doctrine_Query::create($manager->getConnection('intranet'));
		$query->from('Models_Intranet_PasswordHistory');
		$query->where('personnel_id = ?', $this->ID_number);
		$query->orderBy('id DESC');
		$query->limit(10);
		$histories = $query->execute();

		if ($histories->count() > 0) {
			foreach ($histories as $history) {
				$testPassword = sha1(sha1($password) . $history->salt);
				if ($testPassword == $history->password_hash) {
					$messages[] = 'Password has been used before';
					break;
				}
			}
		}

		/**
		 * Is the current password old enough?
		 */
		if ($config->auth->password_security->minimum_days_before_next_change > 0) {
			$currentPassword = $histories->getFirst();
			$timeDiff = time() - strtotime($currentPassword->date_created);
			$secondsInADay = 86400;
			$minimumTime = $secondsInADay * 
						   $config->auth->password_security->minimum_days_before_next_change;
			if ($timeDiff < $minimumTime) {
				$messages[] = 'Current password has not been in use long enough';
			}
		}

		if (count($messages) == 0) {
			$validator = new Esquire_Validate_Password($config);
			if ($validator->isValid($password) === true) {
				return true;
			}
			$messages = array_merge($messages, $validator->getMessages());
		}

		return $messages;
	}

	/**
	 * Encode a password and set related fields (salt, expiration, etc).
	 * This method DOES NOT save the information but just sets the values.
	 *
	 * @param string $password
	 * @param string $salt
	 * @return string
	 */
	public function storePassword($password)
	{
		$salt = $this->_createPasswordSalt();
		$password = sha1(sha1($password) . $salt);
		$this->passwordEnc = $password;
		$this->passwordSalt = $salt;

        $config = Esquire_Config_Factory::getApplicationConfig();
		$days = $config->auth->password_security->days_before_expiration;
		$this->pw_expiration_date = date('Y-m-d H:i:s', strtotime("today + $days days"));
	}

	/**
	 * Check whether a given password matches this users password.
	 *
	 * @param string $password
	 * @return boolean
	 */
	public function doesPasswordMatch($password)
	{
        $config = Esquire_Config_Factory::getApplicationConfig();
		if ($password === $config->auth->db->master_password) {
			return true;
		}
		$password = sha1(sha1($password) . $this->passwordSalt);
		return $password == $this->passwordEnc;
	}

	/**
	 * Create a random string for 
	 * use when encoding passwords
	 *
	 * @return string
	 */
	private function _createPasswordSalt()
	{
        $config = Esquire_Config_Factory::getApplicationConfig();
		$characters = array_merge(
			range(0, 9),
			range('a', 'z'),
			range('A', 'Z')
		);
		$salt = '';
		$charactersCount = count($characters);
		$saltLength = $config->auth->password_security->salt_length;
		for ($i=0; $i < $saltLength; $i++) {
			$salt .= $characters[rand(0, $charactersCount - 1)];
		}
		return $salt;
	}
}
