<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Models_Intranet_InvoicingBatchEmail', 'intranet');

/**
 * Models_Intranet_Base_InvoicingBatchEmail
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property timestamp $timestamp
 * @property string $email_to
 * @property string $email_from
 * @property string $subject
 * @property integer $attachment_kb
 * @property integer $is_fax
 * @property integer $error
 * @property string $error_message
 * @property integer $page_count
 * @property Doctrine_Collection $InvoicingBatchInvoice
 * @property Doctrine_Collection $InvoicingBatchStatement
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Models_Intranet_Base_InvoicingBatchEmail extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('invoicing_batch_email');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('timestamp', 'timestamp', 16, array(
             'type' => 'timestamp',
             'length' => '16',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('email_to', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('email_from', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('subject', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('attachment_kb', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('is_fax', 'integer', 1, array(
             'type' => 'integer',
             'length' => '1',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => true,
             'default' => '((0))',
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('error', 'integer', 1, array(
             'type' => 'integer',
             'length' => '1',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => true,
             'default' => '((0))',
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('error_message', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('page_count', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             'fixed' => false,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Models_Intranet_InvoicingBatchInvoice as InvoicingBatchInvoice', array(
             'local' => 'id',
             'foreign' => 'email_id'));

        $this->hasMany('Models_Intranet_InvoicingBatchStatement as InvoicingBatchStatement', array(
             'local' => 'id',
             'foreign' => 'email_id'));
    }
}